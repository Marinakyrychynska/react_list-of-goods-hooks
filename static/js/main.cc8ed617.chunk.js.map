{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","sortReversed","setSortReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,iBAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA7BR,SAA0BC,EAA1B,GACgD,IAA5CL,EAA2C,EAA3CA,UAAWE,EAAgC,EAAhCA,aACPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAASc,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOHS,CAAiBlB,EAAiB,CAAEG,YAAWE,iBAEnD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaL,EAASc,WACrCQ,KAAK,SACLF,UAAWG,IACT,iBAAkB,CAChB,WAAYnB,IAAcJ,EAASc,WALzC,iCAYA,wBACEO,QAAS,kBAAMhB,EAAaL,EAASgB,SACrCM,KAAK,SACLF,UAAWG,IACT,oBAAqB,CACnB,WAAYnB,IAAcJ,EAASgB,SALzC,4BAYA,wBACEK,QAAS,kBAAMd,GAAiBD,IAChCgB,KAAK,SACLF,UAAWG,IACT,oBAAqB,CACnB,YAAajB,IALnB,sBAYEF,GAAaE,IACb,wBACEe,QAAS,WACPhB,EAAa,IACbE,GAAgB,IAElBe,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACE,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,eClHfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cc8ed617.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n}\n\ninterface SortParameters {\n  sortField: string,\n  sortReversed: boolean,\n}\n\nfunction getPreparedGoods(goods: string[],\n  { sortField, sortReversed }: SortParameters) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [sortReversed, setSortReversed] = useState(false);\n  const visibleGoods\n    = getPreparedGoods(goodsFromServer, { sortField, sortReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.ALPHABET)}\n          type=\"button\"\n          className={cn(\n            'button is-info', {\n              'is-light': sortField !== SortType.ALPHABET,\n            },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.LENGTH)}\n          type=\"button\"\n          className={cn(\n            'button is-success', {\n              'is-light': sortField !== SortType.LENGTH,\n            },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setSortReversed(!sortReversed)}\n          type=\"button\"\n          className={cn(\n            'button is-warning', {\n              'is-light': !sortReversed,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortReversed) && (\n          <button\n            onClick={() => {\n              setSortField('');\n              setSortReversed(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}